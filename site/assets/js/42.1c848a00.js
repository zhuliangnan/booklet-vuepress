(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{550:function(t,s,a){"use strict";a.r(s);var r=a(7),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"go的数据类型以及变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go的数据类型以及变量声明"}},[t._v("#")]),t._v(" Go的数据类型以及变量声明")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("为了快速入门 这里我不在细致的讨论每一种数据类型，之后会出相应的章节来详细介绍 "),a("strong",[t._v("短 快 躲坑")]),t._v(" 才是这个教程的宗旨\n参照 Go语言圣经-The Go Programming Language")])]),t._v(" "),a("h2",{attrs:{id:"go中的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go中的数据类型"}},[t._v("#")]),t._v(" Go中的数据类型")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Unix 一切皆文件\nC++/Java/Python 一切皆对象\nGolang 一切皆类型")])]),t._v(" "),a("ul",[a("li",[t._v("值类型：基本数据类型int, float,bool, string以及数组和struct")]),t._v(" "),a("li",[t._v("引用类型：指针，slice，map，chan等都是引用类型")])]),t._v(" "),a("p",[a("strong",[t._v("所有的参数传递都是值拷贝。对于值类型只是值的拷贝修改不会影响原来的值，引用类型的意义在于类型内部带有指针，值拷贝也会拷贝指针过去，所以一处修改处处可见")])]),t._v(" "),a("p",[t._v("细分")]),t._v(" "),a("ul",[a("li",[t._v("布尔型(bool): 值只可以是常量 true 或者 false。")]),t._v(" "),a("li",[t._v("数字类型: 整型 int 和浮点型 float，支持复数（业务代码用不到），其中位的运算采用补码。")]),t._v(" "),a("li",[t._v("字符串类型（string）: 使用UTF-8编码标识Unicode文本。")]),t._v(" "),a("li",[t._v("其他：指针、数组、结构体(struct)、联合体 (union不常用)、函数、切片、接口（interface）、Map 、 Channel")])]),t._v(" "),a("h2",{attrs:{id:"go语言声明方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语言声明方式"}},[t._v("#")]),t._v(" Go语言声明方式")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("var、const、type和func,分别对应变量、常量、类型和函数实体对象的声明,这里先着重了解变量声明")])]),t._v(" "),a("h3",{attrs:{id:"第一种声明方式-var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一种声明方式-var"}},[t._v("#")]),t._v(" 第一种声明方式 var")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("## 结构为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("变量名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("类型  这个和java是反过来了的，包括函数声明也是\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n")])])]),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//根据赋值自动判断类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类型不同的多个变量，难看的要死")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tk "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t\tl "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这样好看")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("h2",{attrs:{id:"第二种声明方式-声明-赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二种声明方式-声明-赋值"}},[t._v("#")]),t._v(" 第二种声明方式 :=  (声明+赋值)")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//直接声明并赋值（必须是初次声明才有冒号）")]),t._v("\np2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"as"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多个变量一次性声明并赋值")]),t._v("\nh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),a("p",[t._v("值得注意的是：自增和自减是语句，而不是表达式，因 此\tx=i++ 之类的表达式是错误的")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nv"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等价方式 v = v + 1；v变成2 ")]),t._v("\nv"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等价方式 v = v - 1；v变成1")]),t._v("\n## 上面大家可以很清晰的看到 v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" 是个语句  不可以拿来赋值\n")])])]),a("p",[a("strong",[t._v("完了，没错我就是这么短")])]),t._v(" "),a("p",[t._v("------最聪明的欺诈者会告诉你十句真相和一个致命谎言，菜鸟才会谎话连篇。")])])}),[],!1,null,null,null);s.default=n.exports}}]);