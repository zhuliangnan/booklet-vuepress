(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{592:function(s,a,t){"use strict";t.r(a);var e=t(7),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"mysql索引及实际应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引及实际应用"}},[s._v("#")]),s._v(" MySQL索引及实际应用")]),s._v(" "),t("h2",{attrs:{id:"mysql索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引"}},[s._v("#")]),s._v(" MySQL索引")]),s._v(" "),t("ul",[t("li",[s._v("普通索引：仅加速查询 最基本的索引，没有任何限制，是我们大多数情况下使用到的索引。")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v("  index_name  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" user_info"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ul",[t("li",[s._v("唯一索引：与普通索引类型，不同的是：加速查询 + 列值唯一（可以有null）")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v("  mail  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" user_info"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ul",[t("li",[t("p",[s._v("组合索引：将几个列作为一条索引进行检索，使用最左匹配原则。")])]),s._v(" "),t("li",[t("p",[s._v("全文索引：全文索引（fulltext）仅可以适用于MyISAM引擎的数据表；作用于CHAR、VARCHAR、TEXT数据类型的列。")])])]),s._v(" "),t("h2",{attrs:{id:"索引的创建和删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引的创建和删除"}},[s._v("#")]),s._v(" 索引的创建和删除")]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),t("p",[s._v("注意：对于创建索引时如果是blob 和 text 类型，必须指定length。")])]),s._v(" "),t("ul",[t("li",[s._v("创建表的时候同时创建索引")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" healerjean "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  id   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bigint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'主键'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  name  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'姓名'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  email "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'邮箱'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  message "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("text")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'个人信息'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'索引name'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'索引测试表'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("ul",[t("li",[s._v("在存在的表上创建索引")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" healerjean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" healerjean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" employee "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" emp_name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   \n")])])]),t("ul",[t("li",[s._v("删除索引")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index_name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" healerjean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" users  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v("  name_index "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ul",[t("li",[s._v("查看索引")])]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" healerjean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[t("strong",[s._v("关于Explain命令的简单介绍")])]),s._v(" "),t("p",[t("img",{attrs:{src:"http://www.codesuger.com/upload/2020/08/image-b733826c06094a11933a383dc74d08a7.png",alt:"image.png"}})]),s._v(" "),t("ul",[t("li",[s._v("id:选择标识符")]),s._v(" "),t("li",[s._v("select_type: 表示查询的类型。")]),s._v(" "),t("li",[s._v("table: 输出结果集的表")]),s._v(" "),t("li",[s._v("partitions: 匹配的分区")]),s._v(" "),t("li",[s._v("type: 表示表的连接类型")]),s._v(" "),t("li",[s._v("possible_keys: 表示查询时，可能使用的索引")]),s._v(" "),t("li",[s._v("key: 表示实际使用的索引")]),s._v(" "),t("li",[s._v("key_len: 索引字段的长度")]),s._v(" "),t("li",[s._v("ref: 列与索引的比较")]),s._v(" "),t("li",[s._v("rows: 扫描出的行数(估算的行数)")]),s._v(" "),t("li",[s._v("filtered: 按表条件过滤的行百分比")]),s._v(" "),t("li",[s._v("Extra: 执行情况的描述和说明")])]),s._v(" "),t("h2",{attrs:{id:"索引的底层数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引的底层数据结构"}},[s._v("#")]),s._v(" 索引的底层数据结构")]),s._v(" "),t("h3",{attrs:{id:"什么数据结构适合索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么数据结构适合索引"}},[s._v("#")]),s._v(" 什么数据结构适合索引？")]),s._v(" "),t("ol",[t("li",[s._v("BST")]),s._v(" "),t("li",[s._v("红黑树")]),s._v(" "),t("li",[s._v("Hash")])]),s._v(" "),t("p",[s._v("BST在节点有序的情况下会变成一种线性结构，复杂度退化到O(n)，显然是不行的。\n红黑树解决了平衡的问题，但是在数据量比较大的情况下，红黑树的高度太高，导致磁盘IO次数过多，也不够合理。\nHash似乎解决了磁盘IO的问题，但是Hash有大量冲突的时候还是线性遍历，最关键的是限制太多，例如无法支持范围查询，也不支持部分索引匹配。")]),s._v(" "),t("h2",{attrs:{id:"mysql索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引优化"}},[s._v("#")]),s._v(" MySQL索引优化")]),s._v(" "),t("h3",{attrs:{id:"_1-前导模糊查询不能使用索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-前导模糊查询不能使用索引"}},[s._v("#")]),s._v(" 1. 前导模糊查询不能使用索引")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("例如下面 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句不能使用索引。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" title "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%XX'")]),s._v("\n\n而非前导模糊查询则可以使用索引，如下面的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" title "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'XX%'")]),s._v("\n\n页面搜索严禁左模糊或者全模糊，如果需要可以用搜索引擎来解决。\n")])])]),t("h3",{attrs:{id:"_2-union、in、or-都能够命中索引-建议使用-in。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-union、in、or-都能够命中索引-建议使用-in。"}},[s._v("#")]),s._v(" 2. union、in、or 都能够命中索引，建议使用 in。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v("：能够命中索引。\n\n示例代码如下：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\nunionall\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n直接告诉 MySQL 怎么做，MySQL 耗费的 CPU 最少，但是一般不这么写 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v("。\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v("：能够命中索引。\n\n\n\n示例代码如下：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n查询优化耗费的 CPU 比 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("all")]),s._v(" 多，但可以忽略不计，一般情况下建议使用 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v("：新版的 MySQL 能够命中索引。\n\n\n\n示例代码如下：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n查询优化耗费的 CPU 比 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" 多，不建议频繁用 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v("。\n页面搜索严禁左模糊或者全模糊，如果需要可以用搜索引擎来解决。\n")])])]),t("h3",{attrs:{id:"_3-负向条件查询不能使用索引-可以优化为-in-查询。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-负向条件查询不能使用索引-可以优化为-in-查询。"}},[s._v("#")]),s._v(" 3. 负向条件查询不能使用索引，可以优化为 in 查询。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("负向条件有："),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("exists")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" 等。\n\n\n\n例如下面代码：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n可以优化为 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" 查询：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("h3",{attrs:{id:"_4-联合索引最左前缀原则-又叫最左侧查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-联合索引最左前缀原则-又叫最左侧查询"}},[s._v("#")]),s._v(" 4. 联合索引最左前缀原则（又叫最左侧查询）")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("如果在"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("三个字段上建立联合索引，那么它能够加快 a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 三组查询速度。\n\n\n\n例如登录业务需求，代码如下。\n\nselectuid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" login_time "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" login_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("? andpasswd"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("?\n\n可以建立"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("login_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" passwd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的联合索引。\n\n\n\n因为业务上几乎没有 passwd 的单条件查询需求，而有很多 login_name 的单条件查询需求，所以可以建立"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("login_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" passwd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的联合索引，而不是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("passwd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" login_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n\n建联合索引的时候，区分度最高的字段在最左边。\n\n如果建立了"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("联合索引，就不必再单独建立 a 索引。同理，如果建立了"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("联合索引，就不必再单独建立 a、"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 索引。\n\n存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("? "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("?，那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。\n\n最左侧查询需求，并不是指 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 顺序要和联合索引一致。\n\n\n\n下面的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句也可以命中 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("login_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" passwd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 这个联合索引。\n\nselectuid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" login_time "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" passwd"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("? andlogin_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("?\n\n但还是建议 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 后的顺序和联合索引一致，养成好习惯。\n")])])]),t("h3",{attrs:{id:"_5-范围列可以用到索引-联合索引必须是最左前缀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-范围列可以用到索引-联合索引必须是最左前缀"}},[s._v("#")]),s._v(" 5. 范围列可以用到索引（联合索引必须是最左前缀）")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("范围条件有："),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v("、"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v("等。\n\n范围列可以用到索引（联合索引必须是最左前缀），但是范围列后面的列无法用到索引，索引最多用于一个范围列，如果查询条件中有两个范围列则无法全用到索引。\n\n\n\n假如有联合索引 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("empno、title、fromdate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，那么下面的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 中 emp_no 可以用到索引，而 title 和 from_date 则使用不到索引。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromemployees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("titles "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" emp_no "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10010")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' and title='")]),s._v("Senior Engineer"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'and from_date between '")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1986")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' and '")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1986")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v("'\n")])])]),t("h3",{attrs:{id:"_6-把计算放到业务层而不是数据库层。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-把计算放到业务层而不是数据库层。"}},[s._v("#")]),s._v(" 6. 把计算放到业务层而不是数据库层。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("在字段上进行计算不能命中索引。\n\n\n\n例如下面的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2016'")]),s._v("\n\n即使 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("date")]),s._v(" 上建立了索引，也会全表扫描，可优化为值计算，如下：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromdoc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" create_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2016-01-01'")]),s._v("\n\n把计算放到业务层。\n\n\n\n这样做不仅可以节省数据库的 CPU，还可以起到查询缓存优化效果。\n\n\n\n比如下面的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromorder "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("date")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" CURDATE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n可以优化为：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromorder "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("date")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2018-01-2412:00:00'")]),s._v("\n\n优化后的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 释放了数据库的 CPU 多次调用，传入的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 相同，才可以利用查询缓存。\n")])])]),t("h3",{attrs:{id:"_7-强制类型转换会全表扫描"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-强制类型转换会全表扫描"}},[s._v("#")]),s._v(" 7. 强制类型转换会全表扫描")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("如果 phone 字段是 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),s._v(" 类型，则下面的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 不能命中索引。\n\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromuser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" phone"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13800001234")]),s._v("\n\n可以优化为：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromuser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" phone"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'13800001234'")]),s._v("\n")])])]),t("h3",{attrs:{id:"_8-更新十分频繁、数据区分度不高的字段上不宜建立索引。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-更新十分频繁、数据区分度不高的字段上不宜建立索引。"}},[s._v("#")]),s._v(" 8. 更新十分频繁、数据区分度不高的字段上不宜建立索引。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 更新会变更 B"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 树，更新频繁的字段建立索引会大大降低数据库性能。\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" “性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似。\n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 一般区分度在"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("以上的时候就可以建立索引，区分度可以使用 \n "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 来计算。\n")])])]),t("h3",{attrs:{id:"_9-利用覆盖索引来进行查询操作-避免回表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-利用覆盖索引来进行查询操作-避免回表"}},[s._v("#")]),s._v(" 9. 利用覆盖索引来进行查询操作，避免回表")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("被查询的列，数据能从索引中取得，而不用通过行定位符 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("locator 再到 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" 上获取，即“被查询列要被所建的索引覆盖”，这能够加速查询速度。\n\n\n\n例如登录业务需求，代码如下。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" uid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" login_time "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" login_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("? andpasswd"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("?\n\n可以建立"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("login_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" passwd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" login_time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的联合索引，由于 login_time 已经建立在索引中了，被查询的 uid 和 login_time 就不用去 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" 上获取数据了，从而加速查询。\n")])])]),t("h3",{attrs:{id:"_10-如果有-order-by、group-by-的场景-请注意利用索引的有序性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-如果有-order-by、group-by-的场景-请注意利用索引的有序性"}},[s._v("#")]),s._v(" 10. 如果有 order by、group by 的场景，请注意利用索引的有序性")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。\n\n例如对于语句 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("? "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("? "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("     c，可以建立联合索引"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n\n如果索引中有范围查找，那么索引有序性无法利用，如 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v("     a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("，索引"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("无法排序。\n")])])]),t("h3",{attrs:{id:"_11-使用短索引-又叫前缀索引-来优化索引。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-使用短索引-又叫前缀索引-来优化索引。"}},[s._v("#")]),s._v(" 11. 使用短索引（又叫前缀索引）来优化索引。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("前缀索引，就是用列的前缀代替整个列作为索引 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("，当前缀长度合适时，可以做到既使得前缀索引的区分度接近全列索引，同时因为索引 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" 变短而减少了索引文件的大小和维护开销，可以使用 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 索引长度"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 来计算前缀索引的区分度。\n\n\n\n前缀索引兼顾索引大小和查询速度，但是其缺点是不能用于 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 操作，也不能用于覆盖索引（Covering "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Index")]),s._v("，即当索引本身包含查询所需全部数据时，不再访问数据文件本身），很多时候没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。\n\n\n\n例如对于下面的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句：\n\nSELEC "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("employees "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" first_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Eric'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" last_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Anido'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n我们可以建立索引："),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("firstname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lastname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n")])])]),t("h3",{attrs:{id:"_12-建立索引的列-不允许为-null"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-建立索引的列-不允许为-null"}},[s._v("#")]),s._v(" 12. 建立索引的列，不允许为 null")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("单列索引不存 "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" 值，复合索引不存全为 "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" 的值，如果列允许为 "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v("，可能会得到“不符合预期”的结果集，所以，请使用 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" 约束以及默认值。\n")])])]),t("h3",{attrs:{id:"_13-利用延迟关联或者子查询优化超多分页场景。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-利用延迟关联或者子查询优化超多分页场景。"}},[s._v("#")]),s._v(" 13. 利用延迟关联或者子查询优化超多分页场景。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("MySQL 并不是跳过 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),s._v(" 行，而是取 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("N 行，然后返回放弃前 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),s._v(" 行，返回 N 行，那当 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("offset")]),s._v(" 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 改写。\n\n\n\n示例如下，先快速定位需要获取的 id 段，然后再关联:\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" 表"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 条件 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n")])])]),t("h3",{attrs:{id:"_14-业务上具有唯一特性的字段-即使是多个字段的组合-也必须建成唯一索引。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-业务上具有唯一特性的字段-即使是多个字段的组合-也必须建成唯一索引。"}},[s._v("#")]),s._v(" 14. 业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("不要以为唯一索引影响了 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("insert")]),s._v(" 速度，这个速度损耗可以忽略，但提高查找速度是明显的。另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。\n")])])]),t("h3",{attrs:{id:"_15-超过三个表最好不要-join。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-超过三个表最好不要-join。"}},[s._v("#")]),s._v(" 15. 超过三个表最好不要 join。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("需要 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" 的字段，数据类型必须一致，多表关联查询时，保证被关联的字段需要有索引。\n")])])]),t("h3",{attrs:{id:"_16-如果明确知道只有一条结果返回-limit-1-能够提高效率。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-如果明确知道只有一条结果返回-limit-1-能够提高效率。"}},[s._v("#")]),s._v(" 16. 如果明确知道只有一条结果返回，limit 1 能够提高效率。")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("比如如下 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v(" 语句：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromuser "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" login_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("?\n\n可以优化为：\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" login_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("? "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n自己明确知道只有一条结果，但数据库并不知道，明确告诉它，让它主动停止游标移动。\n")])])]),t("h3",{attrs:{id:"_17-sql-性能优化-explain-中的-type-至少要达到-range-级别-要求是-ref-级别-如果可以是-consts-最好"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-sql-性能优化-explain-中的-type-至少要达到-range-级别-要求是-ref-级别-如果可以是-consts-最好"}},[s._v("#")]),s._v(" 17. SQL 性能优化 explain 中的 type：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("consts：单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。\n\nref：使用普通的索引（Normal "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Index")]),s._v("）。\n\nrange：对索引进行范围检索。\n\n当 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" 时，索引物理文件全扫，速度非常慢。\n")])])]),t("h3",{attrs:{id:"_18-单表索引建议控制在5个以内。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-单表索引建议控制在5个以内。"}},[s._v("#")]),s._v(" 18. 单表索引建议控制在5个以内。")]),s._v(" "),t("h3",{attrs:{id:"_19-单索引字段数不允许超过5个"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-单索引字段数不允许超过5个"}},[s._v("#")]),s._v(" 19. 单索引字段数不允许超过5个")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("字段超过"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("个时，实际已经起不到有效过滤数据的作用了。\n")])])]),t("h3",{attrs:{id:"_20-创建索引时避免以下错误观念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-创建索引时避免以下错误观念"}},[s._v("#")]),s._v(" 20. 创建索引时避免以下错误观念")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("索引越多越好，认为一个查询就需要建一个索引。\n\n宁缺勿滥，认为索引会消耗空间、严重拖慢更新和新增速度。\n\n抵制惟一索引，认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。\n\n过早优化，在不了解系统的情况下就开始优化。\n")])])]),t("h2",{attrs:{id:"问题详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题详解"}},[s._v("#")]),s._v(" 问题详解")]),s._v(" "),t("h3",{attrs:{id:"_1-请问如下三条-sql-该如何建立索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-请问如下三条-sql-该如何建立索引"}},[s._v("#")]),s._v(" 1. 请问如下三条 SQL 该如何建立索引？")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("order "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("time")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v("\n\nMySQL 的查询优化器会自动调整 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" 子句的条件顺序以使用适合的索引吗？\n")])])]),t("p",[s._v("回答：")]),s._v(" "),t("div",{staticClass:"language-css extra-class"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[s._v("第一问：建议建立两个索引，即 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("idxab")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("idxbtime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n\n第二问：MySQL 的查询优化器会自动调整 where 子句的条件顺序以使用适合的索引，对于上面的第一条 SQL，如果建立索引为 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("idxba")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 也是可以用到索引的，不过建议 where 后的字段顺序和联合索引保持一致，养成好习惯。\n\n")])])]),t("h3",{attrs:{id:"_2-假如有联合索引-empno、title、fromdate-下面的-sql-是否可以用到索引-如果可以的话-会使用几个列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-假如有联合索引-empno、title、fromdate-下面的-sql-是否可以用到索引-如果可以的话-会使用几个列"}},[s._v("#")]),s._v(" 2.假如有联合索引(empno、title、fromdate)，下面的 SQL 是否可以用到索引，如果可以的话，会使用几个列？")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" employees"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("titles "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" emp_no "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'10001'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'10010'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" title"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Senior Engineer'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" from_date "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1986-01-01'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1986-12-31'")]),s._v("\n")])])]),t("div",{staticClass:"language-css extra-class"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[s._v("回答：\n可以使用索引，可以用到索引全部三个列，这个 SQL 看起来是用了两个范围查询，但作用于 empno 上的“between”实际上相当于“in”，也就是说 empno 实际是多值精确匹配，在 MySQL 中要谨慎地区分多值匹配和范围匹配，否则会对 MySQL 的行为产生困惑。\n")])])]),t("h3",{attrs:{id:"_3-既然索引可以加快查询速度-那么是不是只要是查询语句需要-就建上索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-既然索引可以加快查询速度-那么是不是只要是查询语句需要-就建上索引"}},[s._v("#")]),s._v(" 3.既然索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？")]),s._v(" "),t("div",{staticClass:"language-css extra-class"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[s._v("回答：不是，因为索引虽然加快了查询速度，但索引也是有代价的。索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担。另外，MySQL 在运行时也要消耗资源维护索引，因此索引并不是越多越好。一般两种情况下不建议建索引。第一种情况是表记录比较少，例如一两千条甚至只有几百条记录的表，没必要建索引，另一种是数据的区分度比较低，可以使用 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("distinct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("列名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("*"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 来计算区分度。\n")])])]),t("h3",{attrs:{id:"_4-主键和聚集索引的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-主键和聚集索引的关系"}},[s._v("#")]),s._v(" 4.主键和聚集索引的关系？")]),s._v(" "),t("div",{staticClass:"language-css extra-class"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[s._v("回答：在 MySQL 中，InnoDB 引擎表是（聚集）索引组织表（Clustered IndexOrganize Table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，它会先按照主键进行聚集，如果没有定义主键，InnoDB 会试着使用唯一的非空索引来代替，如果没有这种索引，InnoDB 就会定义隐藏的主键然后在上面进行聚集。由此可见，在 InnoDB 表中，主键必然是聚集索引，而聚集索引则未必是主键。MyISAM 引擎表是堆组织表（Heap Organize Table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，它没有聚集索引的概念。\n")])])]),t("h3",{attrs:{id:"_5-一个6亿的表-a-一个3亿的表-b-通过外键-tid-关联-如何最快的查询出满足条件的第50000到第50200中的这200条数据记录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-一个6亿的表-a-一个3亿的表-b-通过外键-tid-关联-如何最快的查询出满足条件的第50000到第50200中的这200条数据记录"}},[s._v("#")]),s._v(" 5.一个6亿的表 a，一个3亿的表 b，通过外键 tid 关联，如何最快的查询出满足条件的第50000到第50200中的这200条数据记录？")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("回答：方法一：如果 a 表 tid 是自增长，并且是连续的，b表的id为索引。"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v("语句如下。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" froma"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tid"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500000")]),s._v(" limit200"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n方法二：如果 a 表的 tid 不是连续的，那么就需要使用覆盖索引，tid 要么是主键，要么是辅助索引，b 表 id 也需要有索引。"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SQL")]),s._v("语句如下。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" fromb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" tid "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" awhere b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("6.假如建立联合索引(a,b,c)，下列语句是否可以使用索引，如果可以，使用了那几列？（考察联合索引最左前缀原则）")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\n答：是，使用了 a 列。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n答：是，使用了 a，b 列。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n答：是，使用了 a，b，c 列。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\n答：否。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n\n答：是，使用了 a 列。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" andc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n\n答：是，使用了 a，b 列。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xx%'")]),s._v(" andc "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n\n答：是，使用了 a，b 列。\n")])])]),t("p",[s._v("----很多相互关联的事情在发生之后如果不被人注意，那就都等于没发生，但只要有一件事情被人察觉，你就会观察到一系列与之相关的事件")])])}),[],!1,null,null,null);a.default=r.exports}}]);